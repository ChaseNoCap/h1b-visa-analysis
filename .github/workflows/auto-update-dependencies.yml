name: Auto Update Dependencies

on:
  repository_dispatch:
    types: [package-published]
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours as backup
  workflow_dispatch:
    inputs:
      package:
        description: 'Package to update (optional)'
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Configure Git
        run: |
          git config --global pull.rebase true
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Configure git for authenticated HTTPS
        run: |
          # yamllint disable rule:line-length
          git config --global url."https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/".insteadOf ssh://git@github.com/
          git config --global url."https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/".insteadOf git@github.com:
          git config --global url."https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/".insteadOf https://github.com/
          # yamllint enable rule:line-length

      - name: Checkout with submodules
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          submodules: recursive
          fetch-depth: 0

      - name: Update submodules to latest
        run: |
          # Ensure all submodules are initialized
          git submodule init
          
          # Update all submodules to their latest versions
          git submodule foreach 'git fetch origin && git checkout main && git pull origin main || echo "Warning: Failed to update $name"'
          
          # Fetch all tags for version checking
          git submodule foreach 'git fetch --tags origin || true'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://npm.pkg.github.com'
          cache: 'npm'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Configure npm for GitHub Packages
        run: |
          npm config set @chasenocap:registry https://npm.pkg.github.com
          npm config set //npm.pkg.github.com/:_authToken ${{ secrets.PAT_TOKEN }}
          npm config set registry https://registry.npmjs.org/
          echo "NPM configuration:"
          npm config list

      - name: Update specific package (repository_dispatch)
        if: github.event_name == 'repository_dispatch'
        env:
          PACKAGE: ${{ github.event.client_payload.package }}
          VERSION: ${{ github.event.client_payload.version }}
          NPM_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "Updating @chasenocap/${PACKAGE} to ${VERSION}"
          
          # Install specific version
          if [ "${VERSION}" = "latest" ]; then
            npm install "@chasenocap/${PACKAGE}@latest" --save
          else
            npm install "@chasenocap/${PACKAGE}@${VERSION}" --save
          fi
          
          # Update submodule to matching tag
          if [ -d "packages/${PACKAGE}" ]; then
            cd "packages/${PACKAGE}"
            git fetch --tags origin
            
            # Try different tag formats
            if git rev-parse "v${VERSION}" >/dev/null 2>&1; then
              git checkout "v${VERSION}"
            elif git rev-parse "${VERSION}" >/dev/null 2>&1; then
              git checkout "${VERSION}"
            else
              echo "Warning: Could not find tag ${VERSION} or v${VERSION}, updating to latest main"
              git fetch origin main
              git reset --hard origin/main
            fi
            cd ../..
          fi

      - name: Update all packages (scheduled/manual)
        if: github.event_name != 'repository_dispatch'
        env:
          NPM_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "Checking for updates to all @chasenocap packages"
          
          # Update npm dependencies
          npm update
          
          # Update all submodules to latest (without trying to clone missing ones)
          git submodule foreach 'git fetch origin && git reset --hard origin/main || true'

      - name: Check for changes
        id: changes
        run: |
          echo "Checking for changes..."
          git status --porcelain
          
          if [[ -n $(git status --porcelain) ]]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected - will create PR"
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected - skipping PR creation"
          fi

      - name: Create Pull Request
        if: steps.changes.outputs.has_changes == 'true' && github.event_name == 'repository_dispatch'
        id: pr-dispatch
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.PAT_TOKEN }}
          commit-message: "chore: update @chasenocap/${{ github.event.client_payload.package }} to ${{ github.event.client_payload.version }}"
          title: "⬆️ Update @chasenocap/${{ github.event.client_payload.package }} to ${{ github.event.client_payload.version }}"
          body: |
            ## Automated Dependency Update
            
            This PR updates the following:
            - **Package**: `@chasenocap/${{ github.event.client_payload.package }}`
            - **Version**: `${{ github.event.client_payload.version }}`
            - **Triggered by**: Package release in ${{ github.event.client_payload.repository }}
            
            ### Checklist
            - [ ] Tests pass
            - [ ] Build succeeds
            - [ ] Submodule reference updated
            
            ---
            *This PR was automatically created by the dependency update workflow.*
          branch: auto-update-${{ github.event.client_payload.package }}-${{ github.event.client_payload.version }}
          delete-branch: true
          labels: |
            dependencies
            automated

      - name: Create Pull Request (scheduled)
        if: steps.changes.outputs.has_changes == 'true' && github.event_name != 'repository_dispatch'
        id: pr-scheduled
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.PAT_TOKEN }}
          commit-message: "chore: update dependencies"
          title: "⬆️ Scheduled dependency updates"
          body: |
            ## Automated Dependency Update
            
            This PR contains scheduled updates for @chasenocap packages.
            
            ### Checklist
            - [ ] Tests pass
            - [ ] Build succeeds
            - [ ] All submodules updated
            
            ---
            *This PR was automatically created by the scheduled dependency update workflow.*
          branch: auto-update-scheduled-${{ github.run_number }}
          delete-branch: true
          labels: |
            dependencies
            automated
            
      - name: PR Creation Summary
        if: always()
        run: |
          echo "=== PR Creation Summary ==="
          echo "Has changes: ${{ steps.changes.outputs.has_changes }}"
          echo "Event type: ${{ github.event_name }}"
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            echo "Package: ${{ github.event.client_payload.package }}"
            echo "Version: ${{ github.event.client_payload.version }}"
          fi
          echo "PR created (dispatch): ${{ steps.pr-dispatch.outputs.pull-request-number || 'N/A' }}"
          echo "PR created (scheduled): ${{ steps.pr-scheduled.outputs.pull-request-number || 'N/A' }}"